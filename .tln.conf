module.exports = {
  //
  tags: () => [],
  //
  options: () => [],
  //
  inherits: () => [],
  //
  depends: () => [],
  //
  variables: () => [],
   //
  steps: () => {
    return [
      {
        id: 'prereq',
        desc: '',
        script: function(env) {
          return [
            "envsubst > sonar-project.properties < sonar-project.properties.template",
            "envsubst > .env < .env.template",
            "npm i"
          ];
        }
      },
      {
        id: 'build',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "npm i"
          ];
        }
      },
      {
        id: 'test',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "npm run jasmine"
          ];
        }
      },
      {
        id: 'lint',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)"
          ];
        }
      },
      {
        id: 'sonar',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "#~/projects/sonar-scanner-3.0.3.778/bin/sonar-scanner -X"
          ];
        }
      },
      {
        id: 'build.prod',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)"
          ];
        }
      },
      {
        id: 'serve',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "npm run serve"
          ];
        }
      },
      {
        id: 'docker.build',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "#rm -rf ./target || true",
            "#mkdir target",
            "#mkdir target/conf.d",
            "#if [ -d ./ssl ]",
            "#then",
            "#  envsubst '\\${COMPONENT_ID} \\${COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.https.template",
            "#  cp -r ./ssl ./target/",
            "#else",
            "#  envsubst '\\${COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.template",
            "#fi",
            "docker build \\",
            "  -t ${COMPONENT_ID}:${COMPONENT_VERSION} ."
          ];
        }
      },
      {
        id: 'docker.run',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "docker run -d --rm \\",
            " --env-file ./.env \\",
            " -p $COMPONENT_PARAM_PORT:$COMPONENT_PARAM_PORT \\",
            " -p $COMPONENT_PARAM_PORTS:$COMPONENT_PARAM_PORTS \\",
            "  --name ${COMPONENT_ID} ${COMPONENT_ID}:${COMPONENT_VERSION}"
          ];
        }
      },
      {
        id: 'docker.save',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "docker save -o ${COMPONENT_ID}-${COMPONENT_VERSION}.tar ${COMPONENT_ID}:${COMPONENT_VERSION}"
          ];
        }
      },
      {
        id: 'docker.load',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "docker load -i ${COMPONENT_ID}-${COMPONENT_VERSION}.tar"
          ];
        }
      },
      {
        id: 'docker.stop',
        desc: '',
        script: function(env) {
          return [
            "export $(cat ./.env | grep -v ^# | xargs)",
            "docker stop ${COMPONENT_ID}",
            "docker rmi ${COMPONENT_ID}:${COMPONENT_VERSION}"
          ];
        }
      }
    ];
  },
  //
  components: () => []
}
